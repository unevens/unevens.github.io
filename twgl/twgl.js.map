{"version":3,"sources":["webpack://twgl/webpack/universalModuleDefinition","webpack://twgl/webpack/bootstrap","webpack://twgl/./src/attributes.js","webpack://twgl/./src/draw.js","webpack://twgl/./src/framebuffers.js","webpack://twgl/./src/helper.js","webpack://twgl/./src/programs.js","webpack://twgl/./src/textures.js","webpack://twgl/./src/twgl-base.js","webpack://twgl/./src/twgl.js","webpack://twgl/./src/typedarrays.js","webpack://twgl/./src/utils.js","webpack://twgl/./src/vertex-arrays.js"],"names":["STATIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","gl","undefined","defaults","attribPrefix","setAttributePrefix","prefix","setDefaults","newDefaults","helper","copyExistingProperties","setBufferFromTypedArray","type","buffer","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","typedArray","isBuffer","createBuffer","isIndices","name","getNormalizationForTypedArrayType","typedArrayType","Int8Array","Uint8Array","getArray","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","Error","getNumComponents","arrayName","numValues","size","makeTypedArray","typedArrays","isArrayBuffer","Array","isArray","Type","typedArrayTypeFromGLTypeOrTypedArrayCtor","Uint16Array","Float32Array","glTypeFromGLTypeOrTypedArrayType","glTypeOrTypedArrayCtor","getGLTypeForTypedArrayType","getTypedArrayTypeForGLType","attribBufferFromBuffer","arrayType","attribBufferFromSize","numBytes","BYTES_PER_ELEMENT","attribBufferFromArrayLike","constructor","getGLTypeForTypedArray","createAttribsFromArrays","arrays","attribs","Object","keys","forEach","attribName","attrib","value","fn","WebGLBuffer","normalization","normalize","stride","offset","divisor","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","positionKeys","getNumElementsFromNonIndexedArrays","key","ii","numElements","getNumElementsFromAttributes","getBufferParameter","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","elementType","createBufferFromArray","createBuffersFromArrays","buffers","TRIANGLES","drawBufferInfo","count","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","bindVertexArray","programs","setBuffersAndAttributes","setUniforms","uniforms","FRAMEBUFFER","RENDERBUFFER","TEXTURE_2D","DEPTH_COMPONENT","RGBA","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE","LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","internalFormat","renderbufferFormats","isRenderbufferFormat","MAX_COLOR_ATTACHMENT_POINTS","isColorAttachmentPoint","attachmentPoint","createFramebufferInfo","attachments","width","height","target","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","usedColorAttachmentsPoints","framebufferInfo","framebuffer","attachmentOptions","i","attachment","samples","push","createRenderbuffer","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","textureOptions","auto","minMag","mag","wrapS","wrapT","textures","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","layer","framebufferTextureLayer","level","framebufferTexture2D","drawBuffers","resizeFramebufferInfo","ndx","resizeTexture","bindFramebufferInfo","viewport","copyNamedProperties","names","src","dst","hasOwnProperty","error","console","warn","isTypeWeakMaps","Map","isType","weakMap","get","WeakMap","set","isOfType","s","prototype","toString","call","substring","t","WebGLRenderbuffer","isShader","WebGLShader","WebGLTexture","isSampler","WebGLSampler","getElementById","id","document","TEXTURE0","DYNAMIC_DRAW","UNIFORM_BUFFER","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","v","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","utils","isWebGL2","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","setter","arraySetter","cols","Uint32Array","rows","floatAttribSetter","b","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","attrTypeMap","errorRE","addLineNumbersWithError","log","lineOffset","matches","matchAll","lineNoToErrorMap","map","m","lineNo","parseInt","next","end","msg","split","line","err","join","spaceRE","prepShaderSource","shaderSource","replace","reportError","progOptions","errorCallback","callback","setTimeout","errors","checkShaderStatus","shaderType","shader","errFn","compiled","getShaderParameter","lastError","getShaderInfoLog","getShaderSource","glEnumToString","getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","opt","attribLocations","options","args","defaultShaderType","getShaderTypeFromScriptType","scriptType","indexOf","deleteProgramAndShaders","notThese","shaders","getAttachedShaders","has","deleteShader","deleteProgram","wait","ms","Promise","resolve","createProgramNoCheck","programOptions","createProgram","elem","text","createShader","compileShader","attachShader","entries","loc","bindAttribLocation","varyings","linkProgram","shaderSet","Set","hasErrors","getProgramErrors","waitForProgramLinkCompletionAsync","then","wrapCallbackFnToAsyncFn","arg1","reject","createProgramAsync","createProgramInfoAsync","createProgramInfo","ext","getExtension","checkFn","getProgramParameter","COMPLETION_STATUS_KHR","waitTime","waitForAllProgramsLinkCompletionAsync","values","linked","getProgramInfoLog","SHADER_TYPE","filter","_","createProgramFromScripts","shaderScriptIds","scriptId","shaderScript","createProgramFromSources","shaderSources","isBuiltIn","info","startsWith","tokenRE","isDigit","addSetterToUniformTree","fullPath","node","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","isLastToken","child","setUniformTree","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","endsWith","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","createTransformFeedback","tf","bindTransformFeedback","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","pad","padding","createUniformBlockUniformSetter","view","totalRows","row","col","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","ArrayBuffer","uniformBufferIndex","uniformBlockBinding","setters","setterTree","uniformNdx","byteLength","uniformView","asFloat","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","setUniformBlock","setBlockUniforms","tree","prop","actualSetters","numArgs","aNdx","setUniformsAndBindTextures","createAttributeSetters","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","setAttributes","createProgramInfoFromProgram","notIdRE","source","script","origCallback","checkAllPrograms","programSpecs","noDeleteShadersSet","spec","createPrograms","fromEntries","add","createProgramInfos","createProgramInfosForPrograms","createProgramsAsync","createProgramInfosAsync","textureColor","crossOrigin","getShared2DContext","s_ctx","createElement","getContext","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","NEAREST","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","f","numColorComponents","s_textureInternalFormatInfo","getTextureInternalFormatInfo","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","isPowerOf2","canGenerateMipmap","canFilter","getNumComponentsForFormat","getTextureTypeForArrayType","defaultType","guessDimensions","Math","sqrt","setDefaultTextureColor","color","setPackState","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","setSkipStateToDefault","setTextureSamplerParameters","parameteriFn","wrapR","minLod","maxLod","baseLevel","maxLevel","compareFunc","compareMode","setTextureParameters","tex","texParameteri","setSamplerParameters","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","a","setTextureFromElement","element","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","xOffset","yOffset","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","imageBitmap","smallest","largest","max","depth","xMult","yMult","texImage3D","d","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","addEventListener","ImageBitmap","bm","cb","mode","fetch","response","ok","blob","bitmap","e","isTexImageSource","obj","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","imgs","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","slice","setTextureFromArray","Uint8ClampedArray","dimensions","cbrt","unpackAlignment","elementsPerElement","faceSize","subarray","setEmptyTexture","isAsyncSrc","createTextures","numDownloading","images","callCallbackIfReady","onLoadFn","addExtensionsToContext","attributes","setAttributeDefaults_","setTextureDefaults_","prefixRE","addExtensionToContext","extensionName","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","origFn","apply","arguments","supportedExtensions","create3DContext","context","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight","glTypeToTypedArray","tt","Int16Array","CTOR","SharedArrayBuffer","isArrayBufferOrSharedArrayBuffer","texStorage2D","isWebGL1","haveEnumsForType","addEnums","existing","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo"],"mappings":"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E,EAAEa,KAAK,EAAEwB,SAAS,EAAE;EACvD,IAAMnB,UAAU,GAAGsB,cAAc,CAAC3B,KAAK,EAAEwB,SAAS,CAAC;EACnD,OAAO;IACLiB,SAAS,EAAEpC,UAAU,CAACyC,WAAW;IACjC/C,MAAM,EAAEK,0BAA0B,CAACjB,EAAE,EAAEkB,UAAU,EAAEjB,SAAS,EAAEY,KAAK,CAACC,QAAQ,CAAC;IAC7EH,IAAI,EAAE8B,WAAW,CAACmB,sBAAsB,CAAC1C,UAAU,CAAC;IACpDoB,SAAS,EAAE;EACb,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuB,uBAAuB,CAAC7D,EAAE,EAAE8D,MAA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AEqc,gBAAgB,CAAC,EAAE;IACvDxjB,EAAE,CAACgB,UAAU,CAAC4N,cAAc,EAAE4U,gBAAgB,CAAC3iB,KAAK,EAAE8N,YAAY,CAAC;EACrE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgV,gBAAgB,CAACH,gBAAgB,EAAEzF,MAAM,EAAE;EAClD,IAAMiF,OAAO,GAAGQ,gBAAgB,CAACR,OAAO;EACxC,KAAK,IAAM1hB,IAAI,IAAIyc,MAAM,EAAE;IACzB,IAAMxH,MAAM,GAAGyM,OAAO,CAAC1hB,IAAI,CAAC;IAC5B,IAAIiV,MAAM,EAAE;MACV,IAAMlS,KAAK,GAAG0Z,MAAM,CAACzc,IAAI,CAAC;MAC1BiV,MAAM,CAAClS,KAAK,CAAC;IACf;EACF;AACF;AAEA,SAASub,cAAc,CAACgE,IAAI,EAAE7F,MAAM,EAAE;EACpC,KAAK,IAAMzc,IAAI,IAAIyc,MAAM,EAAE;IACzB,IAAM8F,IAAI,GAAGD,IAAI,CAACtiB,IAAI,CAAC;IACvB,IAAI,OAAOuiB,IAAI,KAAK,UAAU,EAAE;MAC9BA,IAAI,CAAC9F,MAAM,CAACzc,IAAI,CAAC,CAAC;IACpB,CAAC,MAAM;MACLse,cAAc,CAACgE,IAAI,CAACtiB,IAAI,CAAC,EAAEyc,MAAM,CAACzc,IAAI,CAAC,CAAC;IAC1C;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsG,WAAW,CAACob,OAAO,EAAW;EAAG;EACxC,IAAMc,aAAa,GAAGd,OAAO,CAAC7D,cAAc,IAAI6D,OAAO;EACvD,IAAMe,OAAO,mDAAc;EAC3B,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,OAAO,EAAE,EAAEC,IAAI,EAAE;IACzC,IAAMjG,MAAM,GAAQiG,IAAI,gCAAJA,IAAI,6BAAJA,IAAI,KAAC;IACzB,IAAIrhB,KAAK,CAACC,OAAO,CAACmb,MAAM,CAAC,EAAE;MACzB,IAAMzb,SAAS,GAAGyb,MAAM,CAACnc,MAAM;MAC/B,KAAK,IAAIwD,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG9C,SAAS,EAAE,EAAE8C,EAAE,EAAE;QACrCwC,WAAW,CAACkc,aAAa,EAAE/F,MAAM,CAAC3Y,EAAE,CAAC,CAAC;MACxC;IACF,CAAC,MAAM;MACL,KAAK,IAAM9D,IAAI,IAAIyc,MAAM,EAAE;QACzB,IAAMxH,MAAM,GAAGuN,aAAa,CAACxiB,IAAI,CAAC;QAClC,IAAIiV,MAAM,EAAE;UACVA,MAAM,CAACwH,MAAM,CAACzc,IAAI,CAAC,CAAC;QACtB;MACF;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM2iB,0BAA0B,GAAGrc,WAAW;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAUA,SAASsc,sBAAsB,CAAClkB,EAAE,EAAEuH,OAAO,EAAE;EAC3C,IAAM4c,aAAa,GAAG,CACtB,CAAC;EAED,IAAMC,UAAU,GAAGpkB,EAAE,CAAC2d,mBAAmB,CAACpW,OAAO,EAAE8H,iBAAiB,CAAC;EACrE,KAAK,IAAIjK,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGgf,UAAU,EAAE,EAAEhf,EAAE,EAAE;IACtC,IAAMN,UAAU,GAAG9E,EAAE,CAACqkB,eAAe,CAAC9c,OAAO,EAAEnC,EAAE,CAAC;IAClD,IAAIuZ,SAAS,CAAC7Z,UAAU,CAAC,EAAE;MACzB;IACF;IACA,IAAMwR,KAAK,GAAGtW,EAAE,CAACskB,iBAAiB,CAAC/c,OAAO,EAAEzC,UAAU,CAACxD,IAAI,CAAC;IAC5D,IAAMsW,QAAQ,GAAGG,WAAW,CAACjT,UAAU,CAACnE,IAAI,CAAC;IAC7C,IAAM4V,MAAM,GAAGqB,QAAQ,CAACrB,MAAM,CAACvW,EAAE,EAAEsW,KAAK,EAAEsB,QAAQ,CAAC;IACnDrB,MAAM,CAAC/D,QAAQ,GAAG8D,KAAK;IACvB6N,aAAa,CAACrf,UAAU,CAACxD,IAAI,CAAC,GAAGiV,MAAM;EACzC;EAEA,OAAO4N,aAAa;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAa,CAACvB,OAAO,EAAE5c,OAAO,EAAE;EACvC,KAAK,IAAM9E,IAAI,IAAI8E,OAAO,EAAE;IAC1B,IAAMmQ,MAAM,GAAGyM,OAAO,CAAC1hB,IAAI,CAAC;IAC5B,IAAIiV,MAAM,EAAE;MACVA,MAAM,CAACnQ,OAAO,CAAC9E,IAAI,CAAC,CAAC;IACvB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqG,uBAAuB,CAAC3H,EAAE,EAAEmH,WAAW,EAAEf,OAAO,EAAE;EACzD,IAAIA,OAAO,CAACoB,iBAAiB,EAAE;IAC7BxH,EAAE,CAACyH,eAAe,CAACrB,OAAO,CAACoB,iBAAiB,CAAC;EAC/C,CAAC,MAAM;IACL+c,aAAa,CAACpd,WAAW,CAACgd,aAAa,IAAIhd,WAAW,EAAEf,OAAO,CAACrC,OAAO,CAAC;IACxE,IAAIqC,OAAO,CAACL,OAAO,EAAE;MACnB/F,EAAE,CAACe,UAAU,CAACxB,oBAAoB,EAAE6G,OAAO,CAACL,OAAO,CAAC;IACtD;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASye,4BAA4B,CAACxkB,EAAE,EAAEuH,OAAO,EAAE;EACjD,IAAM4X,cAAc,GAAGU,oBAAoB,CAAC7f,EAAE,EAAEuH,OAAO,CAAC;EACxD,IAAM4c,aAAa,GAAGD,sBAAsB,CAAClkB,EAAE,EAAEuH,OAAO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AAA;AAAA;AAhZA;AACA;AAAoC;AAiZpC;EAAA;EAAA;EAAA;EAAA;AAAA;AA/YA;AAAkC;AA0YlC;EAAA;EAAA;EAAA;EAAA;AAAA;AAzYA;AAAkD;AA0YlD;EAAA;EAAA;EAAA;EAAA;AAAA;AAzYA;AAA0C;AA0Y1C;EAAA;EAAA;EAAA;EAAA;AAAA;AAzYA;AAAgD;AA2YhD;EAAA;EAAA;EAAA;EAAA;AAAA;AA1YA;AAAmD;AA4YnD;EAAA;EAAA;EAAA;EAAA;AAAA;AAAmC;AAAA;AA3anC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAM5L,EAAE,GAAGC,SAAS,CAAC,CAAE;AACvB,IAAMC,QAAQ,GAAG;EACf80B,sBAAsB,EAAE;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS10B,WAAW,CAACC,WAAW,EAAE;EAChCC,MAAM,CAACC,sBAAsB,CAACF,WAAW,EAAEL,QAAQ,CAAC;EACpD+0B,UAAU,CAACC,qBAAqB,CAAC30B,WAAW,CAAC,CAAC,CAAE;EAChDqL,QAAQ,CAACupB,mBAAmB,CAAC50B,WAAW,CAAC,CAAC,CAAE;AAC9C;;AAEA,IAAM60B,QAAQ,GAAG,SAAS;AAC1B,SAASC,qBAAqB,CAACr1B,EAAE,EAAEs1B,aAAa,EAAE;EAChD3f,KAAK,CAAC0E,cAAc,CAACra,EAAE,EAAE,CAAC,CAAC;EAC3B,IAAMwd,GAAG,GAAGxd,EAAE,CAACyd,YAAY,CAAC6X,aAAa,CAAC;EAC1C,IAAI9X,GAAG,EAAE;IACP,IAAM+X,KAAK,GAAG,CAAC,CAAC;IAChB,IAAMC,QAAQ,GAAGJ,QAAQ,CAACK,IAAI,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;IAChD,IAAMI,UAAU,GAAG,GAAG,GAAGF,QAAQ;IACjC,KAAK,IAAMrwB,GAAG,IAAIqY,GAAG,EAAE;MACrB,IAAMnZ,KAAK,GAAGmZ,GAAG,CAACrY,GAAG,CAAC;MACtB,IAAMwwB,MAAM,GAAG,OAAQtxB,KAAM,KAAK,UAAU;MAC5C,IAAMuxB,MAAM,GAAGD,MAAM,GAAGH,QAAQ,GAAGE,UAAU;MAC7C,IAAIp0B,IAAI,GAAG6D,GAAG;MACd;MACA;MACA,IAAIA,GAAG,CAAC8a,QAAQ,CAAC2V,MAAM,CAAC,EAAE;QACxBt0B,IAAI,GAAG6D,GAAG,CAAC4I,SAAS,CAAC,CAAC,EAAE5I,GAAG,CAACvD,MAAM,GAAGg0B,MAAM,CAACh0B,MAAM,CAAC;MACrD;MACA,IAAI5B,EAAE,CAACsB,IAAI,CAAC,KAAKrB,SAAS,EAAE;QAC1B,IAAI,CAAC01B,MAAM,IAAI31B,EAAE,CAACsB,IAAI,CAAC,KAAK+C,KAAK,EAAE;UACjC7D,MAAM,CAAC0M,IAAI,CAAC5L,IAAI,EAAEtB,EAAE,CAACsB,IAAI,CAAC,EAAE+C,KAAK,EAAEc,GAAG,CAAC;QACzC;MACF,CAAC,MAAM;QACL,IAAIwwB,MAAM,EAAE;UACV31B,EAAE,CAACsB,IAAI,CAAC,GAAG,UAASu0B,MAAM,EAAE;YAC1B,OAAO,YAAW;cAChB,OAAOA,MAAM,CAACC,KAAK,CAACtY,GAAG,EAAEuY,SAAS,CAAC;YACrC,CAAC;UACH,CAAC,CAAC1xB,KAAK,CAAC;QACV,CAAC,MAAM;UACLrE,EAAE,CAACsB,IAAI,CAAC,GAAG+C,KAAK;UAChBkxB,KAAK,CAACj0B,IAAI,CAAC,GAAG+C,KAAK;QACrB;MACF;IACF;IACA;IACAkxB,KAAK,CAAC5xB,WAAW,GAAG;MAClBrC,IAAI,EAAEkc,GAAG,CAAC7Z,WAAW,CAACrC;IACxB,CAAC;IACDqU,KAAK,CAAC0E,cAAc,CAACkb,KAAK,EAAE,CAAC,CAAC;EAChC;EACA,OAAO/X,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMwY,mBAAmB,GAAG,CAC1B,wBAAwB,EACxB,kBAAkB,EAClB,wBAAwB,EACxB,6BAA6B,EAC7B,0BAA0B,EAC1B,iCAAiC,EACjC,gBAAgB,EAChB,UAAU,EACV,wBAAwB,EACxB,gCAAgC,EAChC,wBAAwB,EACxB,0BAA0B,EAC1B,mBAAmB,EACnB,0BAA0B,EAC1B,wBAAwB,EACxB,+BAA+B,EAC/B,yBAAyB,EACzB,0BAA0B,EAC1B,8BAA8B,EAC9B,+BAA+B,EAC/B,gCAAgC,EAChC,+BAA+B,EAC/B,oCAAoC,EACpC,qBAAqB,EACrB,oBAAoB,CACrB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAShB,sBAAsB,CAACh1B,EAAE,EAAE;EAClC,KAAK,IAAIoF,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG4wB,mBAAmB,CAACp0B,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACtDiwB,qBAAqB,CAACr1B,EAAE,EAAEg2B,mBAAmB,CAAC5wB,EAAE,CAAC,CAAC;EACpD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6wB,eAAe,CAAClG,MAAM,EAAExV,WAAW,EAAE;EAC5C,IAAM3N,KAAK,GAAG,CAAC,OAAO,EAAE,oBAAoB,CAAC;EAC7C,IAAIspB,OAAO,GAAG,IAAI;EAClB,KAAK,IAAI9wB,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGwH,KAAK,CAAChL,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACxC8wB,OAAO,GAAGnG,MAAM,CAAClK,UAAU,CAACjZ,KAAK,CAACxH,EAAE,CAAC,EAAEmV,WAAW,CAAC;IACnD,IAAI2b,OAAO,EAAE;MACX,IAAIh2B,QAAQ,CAAC80B,sBAAsB,EAAE;QACnCA,sBAAsB,CAACkB,OAAO,CAAC;MACjC;MACA;IACF;EACF;EACA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAACpG,MAAM,EAAExV,WAAW,EAAE;EAC5C,IAAMva,EAAE,GAAGi2B,eAAe,CAAClG,MAAM,EAAExV,WAAW,CAAC;EAC/C,OAAOva,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASo2B,aAAa,CAACrG,MAAM,EAAExV,WAAW,EAAE;EAC1C,IAAM3N,KAAK,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,oBAAoB,CAAC;EACvD,IAAIspB,OAAO,GAAG,IAAI;EAClB,KAAK,IAAI9wB,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGwH,KAAK,CAAChL,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACxC8wB,OAAO,GAAGnG,MAAM,CAAClK,UAAU,CAACjZ,KAAK,CAACxH,EAAE,CAAC,EAAEmV,WAAW,CAAC;IACnD,IAAI2b,OAAO,EAAE;MACX,IAAIh2B,QAAQ,CAAC80B,sBAAsB,EAAE;QACnCA,sBAAsB,CAACkB,OAAO,CAAC;MACjC;MACA;IACF;EACF;EACA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrQ,UAAU,CAACkK,MAAM,EAAExV,WAAW,EAAE;EACvC,IAAMva,EAAE,GAAGo2B,aAAa,CAACrG,MAAM,EAAExV,WAAW,CAAC;EAC7C,OAAOva,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASq2B,yBAAyB,CAACtG,MAAM,EAAEuG,UAAU,EAAE;EACrDA,UAAU,GAAGA,UAAU,IAAI,CAAC;EAC5BA,UAAU,GAAGxJ,IAAI,CAAC2D,GAAG,CAAC,CAAC,EAAE6F,UAAU,CAAC;EACpC,IAAMpsB,KAAK,GAAI6lB,MAAM,CAACwG,WAAW,GAAID,UAAU,GAAG,CAAC;EACnD,IAAMnsB,MAAM,GAAG4lB,MAAM,CAACyG,YAAY,GAAGF,UAAU,GAAG,CAAC;EACnD,IAAIvG,MAAM,CAAC7lB,KAAK,KAAKA,KAAK,IAAI6lB,MAAM,CAAC5lB,MAAM,KAAKA,MAAM,EAAE;IACtD4lB,MAAM,CAAC7lB,KAAK,GAAGA,KAAK;IACpB6lB,MAAM,CAAC5lB,MAAM,GAAGA,MAAM;IACtB,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,C;;;;;;;;;;;;;;;;;;;ACtYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMnK,EAAE,GAAGC,SAAS,CAAC,CAAE;;AAEvB;AACA,IAAMR,IAAI,GAA6B,MAAM;AAC7C,IAAMC,aAAa,GAAoB,MAAM;AAC7C,IAAMC,KAAK,GAA4B,MAAM;AAC7C,IAAMC,cAAc,GAAmB,MAAM;AAC7C,IAAMC,GAAG,GAA8B,MAAM;AAC7C,IAAMC,YAAY,GAAqB,MAAM;AAC7C,IAAMC,KAAK,GAA4B,MAAM;AAC7C,IAAM4qB,sBAAsB,GAAS,MAAM;AAC3C,IAAMC,sBAAsB,GAAS,MAAM;AAC3C,IAAMC,oBAAoB,GAAW,MAAM;AAC3C,IAAMC,UAAU,GAAqB,MAAM;AAC3C,IAAME,2BAA2B,GAAI,MAAM;AAC3C,IAAMC,4BAA4B,GAAG,MAAM;AAC3C,IAAMC,wBAAwB,GAAO,MAAM;AAC3C,IAAMC,8BAA8B,GAAG,MAAM;AAC7C,IAAMC,iBAAiB,GAAc,MAAM;AAE3C,IAAMqL,kBAAkB,GAAG,CAAC,CAAC;AAC7B;EACE,IAAMC,EAAE,GAAGD,kBAAkB;EAC7BC,EAAE,CAACj3B,IAAI,CAAC,GAA6BgC,SAAS;EAC9Ci1B,EAAE,CAACh3B,aAAa,CAAC,GAAoBgC,UAAU;EAC/Cg1B,EAAE,CAAC/2B,KAAK,CAAC,GAA4Bg3B,UAAU;EAC/CD,EAAE,CAAC92B,cAAc,CAAC,GAAmBmD,WAAW;EAChD2zB,EAAE,CAAC72B,GAAG,CAAC,GAA8BwW,UAAU;EAC/CqgB,EAAE,CAAC52B,YAAY,CAAC,GAAqB4W,WAAW;EAChDggB,EAAE,CAAC32B,KAAK,CAAC,GAA4BiD,YAAY;EACjD0zB,EAAE,CAAC/L,sBAAsB,CAAC,GAAW5nB,WAAW;EAChD2zB,EAAE,CAAC9L,sBAAsB,CAAC,GAAW7nB,WAAW;EAChD2zB,EAAE,CAAC7L,oBAAoB,CAAC,GAAa9nB,WAAW;EAChD2zB,EAAE,CAAC5L,UAAU,CAAC,GAAuB/nB,WAAW;EAChD2zB,EAAE,CAAC1L,2BAA2B,CAAC,GAAMtU,WAAW;EAChDggB,EAAE,CAACzL,4BAA4B,CAAC,GAAKvU,WAAW;EAChDggB,EAAE,CAACxL,wBAAwB,CAAC,GAASxU,WAAW;EAChDggB,EAAE,CAACvL,8BAA8B,CAAC,GAAGzU,WAAW;EAChDggB,EAAE,CAACtL,iBAAiB,CAAC,GAAgB1U,WAAW;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS9S,sBAAsB,CAAC1C,UAAU,EAAE;EAC1C,IAAIA,UAAU,YAAYO,SAAS,EAAU;IAAE,OAAOhC,IAAI;EAAE,CAAC,CAAW;EACxE,IAAIyB,UAAU,YAAYQ,UAAU,EAAS;IAAE,OAAOhC,aAAa;EAAE,CAAC,CAAE;EACxE,IAAIwB,UAAU,YAAYgzB,iBAAiB,EAAE;IAAE,OAAOx0B,aAAa;EAAE,CAAC,CAAE;EACxE,IAAIwB,UAAU,YAAYy1B,UAAU,EAAS;IAAE,OAAOh3B,KAAK;EAAE,CAAC,CAAU;EACxE,IAAIuB,UAAU,YAAY6B,WAAW,EAAQ;IAAE,OAAOnD,cAAc;EAAE,CAAC,CAAC;EACxE,IAAIsB,UAAU,YAAYmV,UAAU,EAAS;IAAE,OAAOxW,GAAG;EAAE,CAAC,CAAY;EACxE,IAAIqB,UAAU,YAAYwV,WAAW,EAAQ;IAAE,OAAO5W,YAAY;EAAE,CAAC,CAAG;EACxE,IAAIoB,UAAU,YAAY8B,YAAY,EAAO;IAAE,OAAOjD,KAAK;EAAE,CAAC,CAAU;EACxE,MAAM,IAAIoC,KAAK,CAAC,8BAA8B,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,0BAA0B,CAAC3B,cAAc,EAAE;EAClD,IAAIA,cAAc,KAAKC,SAAS,EAAU;IAAE,OAAOhC,IAAI;EAAE,CAAC,CAAW;EACrE,IAAI+B,cAAc,KAAKE,UAAU,EAAS;IAAE,OAAOhC,aAAa;EAAE,CAAC,CAAE;EACrE,IAAI8B,cAAc,KAAK0yB,iBAAiB,EAAE;IAAE,OAAOx0B,aAAa;EAAE,CAAC,CAAE;EACrE,IAAI8B,cAAc,KAAKm1B,UAAU,EAAS;IAAE,OAAOh3B,KAAK;EAAE,CAAC,CAAU;EACrE,IAAI6B,cAAc,KAAKuB,WAAW,EAAQ;IAAE,OAAOnD,cAAc;EAAE,CAAC,CAAC;EACrE,IAAI4B,cAAc,KAAK6U,UAAU,EAAS;IAAE,OAAOxW,GAAG;EAAE,CAAC,CAAY;EACrE,IAAI2B,cAAc,KAAKkV,WAAW,EAAQ;IAAE,OAAO5W,YAAY;EAAE,CAAC,CAAG;EACrE,IAAI0B,cAAc,KAAKwB,YAAY,EAAO;IAAE,OAAOjD,KAAK;EAAE,CAAC,CAAU;EACrE,MAAM,IAAIoC,KAAK,CAAC,8BAA8B,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,0BAA0B,CAACzC,IAAI,EAAE;EACxC,IAAMi2B,IAAI,GAAGH,kBAAkB,CAAC91B,IAAI,CAAC;EACrC,IAAI,CAACi2B,IAAI,EAAE;IACT,MAAM,IAAIz0B,KAAK,CAAC,iBAAiB,CAAC;EACpC;EACA,OAAOy0B,IAAI;AACb;AAEA,IAAMl0B,aAAa,GAAG,OAAOm0B,iBAAiB,KAAK,WAAW,GAC1D,SAASC,gCAAgC,CAACxH,CAAC,EAAE;EAC7C,OAAOA,CAAC,IAAIA,CAAC,CAAC1uB,MAAM,KAAK0uB,CAAC,CAAC1uB,MAAM,YAAYiiB,WAAW,IAAIyM,CAAC,CAAC1uB,MAAM,YAAYi2B,iBAAiB,CAAC;AACpG,CAAC,GACC,SAASn0B,aAAa,CAAC4sB,CAAC,EAAE;EAC1B,OAAOA,CAAC,IAAIA,CAAC,CAAC1uB,MAAM,IAAI0uB,CAAC,CAAC1uB,MAAM,YAAYiiB,WAAW;AACzD,CAAC;AAAC,sC;;;;;;;;;;;;;;;;;;ACzIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASjN,QAAQ,CAAC5V,EAAE,EAAE;EACpB;EACA;EACA;EACA;EACA,OAAO,CAAC,CAACA,EAAE,CAAC+2B,YAAY;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACh3B,EAAE,EAAE;EACpB;EACA;EACA;EACA;EACA;EACA,OAAO,CAACA,EAAE,CAAC+2B,YAAY;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM1c,cAAc,GAAI,YAAW;EACjC,IAAM4c,gBAAgB,GAAG,CAAC,CAAC;EAC3B,IAAM1B,KAAK,GAAG,CAAC,CAAC;EAEhB,SAAS2B,QAAQ,CAACl3B,EAAE,EAAE;IACpB,IA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","file":"twgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/twgl-base.js\");\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? typedArrays.getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? typedArrays.getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER, buffer);\n  gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: typedArrays.getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: typedArrays.getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE)  return 1;  // eslint-disable-line\n  if (type === SHORT)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT) return 2;  // eslint-disable-line\n  if (type === INT)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT)   return 4;  // eslint-disable-line\n  if (type === FLOAT)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nexport {\n  createAttribsFromArrays,\n  createBuffersFromArrays,\n  createBufferFromArray,\n  createBufferFromTypedArray,\n  createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray,\n\n  setAttributePrefix,\n\n  setDefaults as setAttributeDefaults_,\n  getNumComponents as getNumComponents_,\n  getArray as getArray_,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    programs.setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nexport {\n  drawBufferInfo,\n  drawObjectList,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibility they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nexport {\n  bindFramebufferInfo,\n  createFramebufferInfo,\n  resizeFramebufferInfo,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && isType(t, 'WebGLShader');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\nexport {\n  copyExistingProperties,\n  copyNamedProperties,\n  error,\n  warn,\n  isBuffer,\n  isRenderbuffer,\n  isShader,\n  isTexture,\n  isSampler,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = helper.error;\nconst warn = helper.warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${utils.glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nexport {\n  createAttributeSetters,\n\n  createProgram,\n  createProgramAsync,\n  createPrograms,\n  createProgramsAsync,\n  createProgramFromScripts,\n  createProgramFromSources,\n  createProgramInfo,\n  createProgramInfoAsync,\n  createProgramInfos,\n  createProgramInfosAsync,\n  createProgramInfoFromProgram,\n  createUniformSetters,\n  createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram,\n  createUniformBlockInfo,\n\n  createTransformFeedback,\n  createTransformFeedbackInfo,\n  bindTransformFeedbackInfo,\n\n  setAttributes,\n  setBuffersAndAttributes,\n  setUniforms,\n  setUniformsAndBindTextures,\n  setUniformBlock,\n  setBlockUniforms,\n  bindUniformBlock,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = typedArrays.isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\nconst TEXTURE_COMPARE_MODE           = 0x884C;\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT, UNSIGNED_SHORT], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT, UNSIGNED_INT], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n  if (options.compareFunc !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\n  }\n  if (options.compareMode !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nexport {\n  setDefaults as setTextureDefaults_,\n\n  createSampler,\n  createSamplers,\n  setSamplerParameters,\n\n  createTexture,\n  setEmptyTexture,\n  setTextureFromArray,\n  loadTextureFromUrl,\n  setTextureFromElement,\n  setTextureFilteringForSize,\n  setTextureParameters,\n  setDefaultTextureColor,\n  createTextures,\n  resizeTexture,\n\n  canGenerateMipmap,\n  canFilter,\n  getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat,\n};\n\n","export * from './twgl.js';\n\n\n\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as attributes from './attributes.js';\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\nimport * as utils from './utils.js';\n\nimport * as draw from './draw.js';\nimport * as framebuffers from './framebuffers.js';\nimport * as programs from './programs.js';\nimport * as typedarrays from './typedarrays.js';\nimport * as vertexArrays from './vertex-arrays.js';\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults);  // eslint-disable-line\n  textures.setTextureDefaults_(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    utils.glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport {\n  addExtensionsToContext,\n  getContext,\n  getWebGLContext,\n  resizeCanvasToDisplaySize,\n  setDefaults,\n\n  attributes,\n  draw,\n  framebuffers,\n  programs,\n  textures,\n  typedarrays,\n  utils,\n  vertexArrays,\n};\n\n// function notPrivate(name) {\n//   return name[name.length - 1] !== '_';\n// }\n//\n// function copyPublicProperties(src, dst) {\n//   Object.keys(src).filter(notPrivate).forEach(function(key) {\n//     dst[key] = src[key];\n//   });\n//   return dst;\n// }\n\nexport * from './attributes.js';\nexport * from './draw.js';\nexport * from './framebuffers.js';\nexport * from './programs.js';\nexport * from './textures.js';\nexport * from './typedarrays.js';\nexport * from './utils.js';\nexport * from './vertex-arrays.js';\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nexport {\n  getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType,\n  isArrayBuffer,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nexport {\n  glEnumToString,\n  isWebGL1,\n  isWebGL2,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nexport {\n  createVertexArrayInfo,\n  createVAOAndSetAttributes,\n  createVAOFromBufferInfo,\n};\n\n"],"sourceRoot":""}